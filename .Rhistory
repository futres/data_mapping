ray_clean$scientificName <- paste(ray_clean$GENUS, ray_clean$SPECIES, sep = " ")
ray_clean$SPEC_ID <- gsub("^\\s+|\\s+$", "", ray_clean$SPEC_ID)
ray_clean$measurementUnit <- "mm"
ray <- read.csv("https://de.cyverse.org/dl/d/16030E74-A54F-44B2-AA03-76B1A49FCA49/1.FuTRESEquidDbase_6_24_2019.csv", stringsAsFactors = FALSE) #how to point to latest data version?
boneAbbr <- read.csv("https://de.cyverse.org/dl/d/C82D7659-5503-455B-8F7F-883DC3F1BAE0/BoneAbbr.csv", stringsAsFactors = FALSE)
locality <- read.csv("https://de.cyverse.org/dl/d/736F420E-6474-45F0-82EE-6A43D1703DE2/2.LOCAL_6_24_2019FuTRESPROTECTED.csv", stringsAsFactors = FALSE)
locality.1 <- locality[,c(1:3,5)]
#get rid of protected sites
ray_safe <- subset(ray, subset = ray$PROTECTED...P != "P")
for(i in 1:length(ray_safe$SPEC_ID)){
if(isTRUE(ray_safe$LOCALITY != "NA")){
ray_safe$verbatimLocality[i] <- locality.1$LOCALITYName[locality.1$LOCALITY.No == ray_safe$LOCALITY[i] & locality.1$COUNTRY.No == ray_safe$COUNTRY[i]]
ray_safe$country[i] <- locality.1$COUNTRYName[locality.1$LOCALITY.No == ray_safe$LOCALITY[i] & locality.1$COUNTRY.No == ray_safe$COUNTRY[i]]
}
else{
next()
}
}
#cut ray's data to just limb and dental measurements for now from "focused traits"
#https://docs.google.com/spreadsheets/d/1rU15rBo-JpopEqpxBXLWSqaecBXwtYpxBLjRImcCvDQ/edit#gid=0
Rpattern <-  "pre?molar|metacarpal|metatarsal|1st phalanx III" #? allows it to be premolar or molar (note: need all three letters: p r e)
Rx <- grep(Rpattern, boneAbbr$Bone, value = TRUE)
boneAbbr_sub <- boneAbbr[boneAbbr$Bone %in% Rx,]
ray_sub1 <- ray_safe[ray_safe$BONE %in% boneAbbr_sub$Abbreviation,]
ray_sub2 <- subset(ray_safe, subset = c(ray_safe$BONE == "tibia" |
ray_safe$BONE == "humerus" |
ray_safe$BONE == "femur" |
ray_safe$BONE == "radius"))
ray_sub <- rbind(ray_sub1, ray_sub2)
ray_long_sub$measurement <- paste(ray_long_sub$BONE, ray_long_sub$variable, sep = " ")
#create species name
ray_clean$scientificName <- paste(ray_clean$GENUS, ray_clean$SPECIES, sep = " ")
ray_clean$SPEC_ID <- gsub("^\\s+|\\s+$", "", ray_clean$SPEC_ID)
View(ray_clean)
template <- read.csv("https://docs.google.com/spreadsheets/d/1BGnjBffwnG35I7qcdLSlAPR-R0KmI855lLMPZzJSlbk/edit#gid=0", stringsAsFactors = FALSE)
ontology <- read.csv("https://docs.google.com/spreadsheets/d/1KNJIpRkpoLRzUJVb2dv73T-CJTnDq0sDYSkDKfgA5QU/edit#gid=0", stringsAsFactors = FALSE)
View(template)
x <- read.table(https://docs.google.com/spreadsheets/d/1KNJIpRkpoLRzUJVb2dv73T-CJTnDq0sDYSkDKfgA5QU/edit?usp=sharing)
x <- read.table("https://docs.google.com/spreadsheets/d/1KNJIpRkpoLRzUJVb2dv73T-CJTnDq0sDYSkDKfgA5QU/edit?usp=sharing")
x
template <- read.csv("https://docs.google.com/spreadsheets/d/1BGnjBffwnG35I7qcdLSlAPR-R0KmI855lLMPZzJSlbk/edit#gid=0", stringsAsFactors = FALSE)
ontology <- read.csv("https://docs.google.com/spreadsheets/d/1KNJIpRkpoLRzUJVb2dv73T-CJTnDq0sDYSkDKfgA5QU/edit#gid=0", stringsAsFactors = FALSE)
## Ray's Data
ray <- read.csv("https://de.cyverse.org/dl/d/16030E74-A54F-44B2-AA03-76B1A49FCA49/1.FuTRESEquidDbase_6_24_2019.csv", stringsAsFactors = FALSE) #how to point to latest data version?
boneAbbr <- read.csv("https://de.cyverse.org/dl/d/C82D7659-5503-455B-8F7F-883DC3F1BAE0/BoneAbbr.csv", stringsAsFactors = FALSE)
locality <- read.csv("https://de.cyverse.org/dl/d/736F420E-6474-45F0-82EE-6A43D1703DE2/2.LOCAL_6_24_2019FuTRESPROTECTED.csv", stringsAsFactors = FALSE)
locality.1 <- locality[,c(1:3,5)]
template <- read.csv("template_mapping.csv", stringsAsFactors = FALSE)
ontology <- read.csv("ontology_mapping.csv", stringsAsFactors = FALSE)
## Ray's Data
ray <- read.csv("https://de.cyverse.org/dl/d/16030E74-A54F-44B2-AA03-76B1A49FCA49/1.FuTRESEquidDbase_6_24_2019.csv", stringsAsFactors = FALSE) #how to point to latest data version?
boneAbbr <- read.csv("https://de.cyverse.org/dl/d/C82D7659-5503-455B-8F7F-883DC3F1BAE0/BoneAbbr.csv", stringsAsFactors = FALSE)
locality <- read.csv("https://de.cyverse.org/dl/d/736F420E-6474-45F0-82EE-6A43D1703DE2/2.LOCAL_6_24_2019FuTRESPROTECTED.csv", stringsAsFactors = FALSE)
locality.1 <- locality[,c(1:3,5)]
#get rid of protected sites
ray_safe <- subset(ray, subset = ray$PROTECTED...P != "P")
for(i in 1:length(ray_safe$SPEC_ID)){
if(isTRUE(ray_safe$LOCALITY != "NA")){
ray_safe$verbatimLocality[i] <- locality.1$LOCALITYName[locality.1$LOCALITY.No == ray_safe$LOCALITY[i] & locality.1$COUNTRY.No == ray_safe$COUNTRY[i]]
ray_safe$country[i] <- locality.1$COUNTRYName[locality.1$LOCALITY.No == ray_safe$LOCALITY[i] & locality.1$COUNTRY.No == ray_safe$COUNTRY[i]]
}
else{
next()
}
}
#cut ray's data to just limb and dental measurements for now from "focused traits"
#https://docs.google.com/spreadsheets/d/1rU15rBo-JpopEqpxBXLWSqaecBXwtYpxBLjRImcCvDQ/edit#gid=0
Rpattern <-  "pre?molar|metacarpal|metatarsal|1st phalanx III" #? allows it to be premolar or molar (note: need all three letters: p r e)
Rx <- grep(Rpattern, boneAbbr$Bone, value = TRUE)
boneAbbr_sub <- boneAbbr[boneAbbr$Bone %in% Rx,]
ray_sub1 <- ray_safe[ray_safe$BONE %in% boneAbbr_sub$Abbreviation,]
ray_sub2 <- subset(ray_safe, subset = c(ray_safe$BONE == "tibia" |
ray_safe$BONE == "humerus" |
ray_safe$BONE == "femur" |
ray_safe$BONE == "radius"))
ray_sub <- rbind(ray_sub1, ray_sub2)
ray_long_sub$measurement <- paste(ray_long_sub$BONE, ray_long_sub$variable, sep = " ")
#create species name
ray_clean$binomial <- paste(ray_clean$GENUS, ray_clean$SPECIES, sep = " ")
ray_clean$SPEC_ID <- gsub("^\\s+|\\s+$", "", ray_clean$SPEC_ID)
colnames(ray_clean)
#get rid of protected sites
ray_safe <- subset(ray, subset = ray$PROTECTED...P != "P")
for(i in 1:length(ray_safe$SPEC_ID)){
if(isTRUE(ray_safe$LOCALITY != "NA")){
ray_safe$verbatimLocality[i] <- locality.1$LOCALITYName[locality.1$LOCALITY.No == ray_safe$LOCALITY[i] & locality.1$COUNTRY.No == ray_safe$COUNTRY[i]]
ray_safe$country[i] <- locality.1$COUNTRYName[locality.1$LOCALITY.No == ray_safe$LOCALITY[i] & locality.1$COUNTRY.No == ray_safe$COUNTRY[i]]
}
else{
next()
}
}
colnames(ray_safe)
#cut ray's data to just limb and dental measurements for now from "focused traits"
#https://docs.google.com/spreadsheets/d/1rU15rBo-JpopEqpxBXLWSqaecBXwtYpxBLjRImcCvDQ/edit#gid=0
Rpattern <-  "pre?molar|metacarpal|metatarsal|1st phalanx III" #? allows it to be premolar or molar (note: need all three letters: p r e)
Rx <- grep(Rpattern, boneAbbr$Bone, value = TRUE)
boneAbbr_sub <- boneAbbr[boneAbbr$Bone %in% Rx,]
ray_sub1 <- ray_safe[ray_safe$BONE %in% boneAbbr_sub$Abbreviation,]
ray_sub2 <- subset(ray_safe, subset = c(ray_safe$BONE == "tibia" |
ray_safe$BONE == "humerus" |
ray_safe$BONE == "femur" |
ray_safe$BONE == "radius"))
ray_sub <- rbind(ray_sub1, ray_sub2)
colnames(ray_sub)
ray_long_sub$measurement <- paste(ray_long_sub$BONE, ray_long_sub$variable, sep = " ")
ray_sub$measurement <- paste(ray_long_sub$BONE, ray_long_sub$variable, sep = " ")
#create species name
ray_clean$binomial <- paste(ray_sub$GENUS, ray_sub$SPECIES, sep = " ")
#create species name
ray_sub$binomial <- paste(ray_sub$GENUS, ray_sub$SPECIES, sep = " ")
ray_sub$SPEC_ID <- gsub("^\\s+|\\s+$", "", ray_sub$SPEC_ID)
#measurements are from 13:51
ray_long <- melt(ray_sub, id.vars = c(1:12))
colnames(ray_long)
#select out specific measurements / change measurement names and map to template
ray_long_sub <- subset(ray_long, ray_long$measurement %in% ontology$measurement[ontology$dataset == "ray"])
#get rid of NAs
ray_clean <- ray_long_sub[!(is.na(ray_long_sub$value)),]
#add units
ray_clean$measurementUnit <- "mm"
#add units
ray_clean$measurementUnit <- rep("mm", length(ray_clean$SPEC_ID))
## Ray's Data
ray <- read.csv("https://de.cyverse.org/dl/d/16030E74-A54F-44B2-AA03-76B1A49FCA49/1.FuTRESEquidDbase_6_24_2019.csv", stringsAsFactors = FALSE) #how to point to latest data version?
boneAbbr <- read.csv("https://de.cyverse.org/dl/d/C82D7659-5503-455B-8F7F-883DC3F1BAE0/BoneAbbr.csv", stringsAsFactors = FALSE)
locality <- read.csv("https://de.cyverse.org/dl/d/736F420E-6474-45F0-82EE-6A43D1703DE2/2.LOCAL_6_24_2019FuTRESPROTECTED.csv", stringsAsFactors = FALSE)
locality.1 <- locality[,c(1:3,5)]
#get rid of protected sites
ray_safe <- subset(ray, subset = ray$PROTECTED...P != "P")
for(i in 1:length(ray_safe$SPEC_ID)){
if(isTRUE(ray_safe$LOCALITY != "NA")){
ray_safe$verbatimLocality[i] <- locality.1$LOCALITYName[locality.1$LOCALITY.No == ray_safe$LOCALITY[i] & locality.1$COUNTRY.No == ray_safe$COUNTRY[i]]
ray_safe$country[i] <- locality.1$COUNTRYName[locality.1$LOCALITY.No == ray_safe$LOCALITY[i] & locality.1$COUNTRY.No == ray_safe$COUNTRY[i]]
}
else{
next()
}
}
#cut ray's data to just limb and dental measurements for now from "focused traits"
#https://docs.google.com/spreadsheets/d/1rU15rBo-JpopEqpxBXLWSqaecBXwtYpxBLjRImcCvDQ/edit#gid=0
Rpattern <-  "pre?molar|metacarpal|metatarsal|1st phalanx III" #? allows it to be premolar or molar (note: need all three letters: p r e)
Rx <- grep(Rpattern, boneAbbr$Bone, value = TRUE)
boneAbbr_sub <- boneAbbr[boneAbbr$Bone %in% Rx,]
ray_sub1 <- ray_safe[ray_safe$BONE %in% boneAbbr_sub$Abbreviation,]
ray_sub2 <- subset(ray_safe, subset = c(ray_safe$BONE == "tibia" |
ray_safe$BONE == "humerus" |
ray_safe$BONE == "femur" |
ray_safe$BONE == "radius"))
ray_sub <- rbind(ray_sub1, ray_sub2)
ray_sub$measurement <- paste(ray_long_sub$BONE, ray_long_sub$variable, sep = " ")
#create species name
ray_sub$binomial <- paste(ray_sub$GENUS, ray_sub$SPECIES, sep = " ")
ray_sub$measurement <- paste(ray_sub$BONE, ray_sub$variable, sep = " ")
#create species name
ray_sub$binomial <- paste(ray_sub$GENUS, ray_sub$SPECIES, sep = " ")
ray_sub$SPEC_ID <- gsub("^\\s+|\\s+$", "", ray_sub$SPEC_ID)
#measurements are from 13:51
ray_long <- melt(ray_sub, id.vars = c(1:12))
#select out specific measurements / change measurement names and map to template
ray_long_sub <- subset(ray_long, ray_long$measurement %in% ontology$measurement[ontology$dataset == "ray"])
#get rid of NAs
ray_clean <- ray_long_sub[!(is.na(ray_long_sub$value)),]
colnames(ray_clean)
colnames(ray_sub)
#reorder columns
ray_sub1 <- ray_sub[,c(1:12, 53,54,13:51)]
#measurements are from 13:51
ray_long <- melt(ray_sub1, id.vars = c(1:12))
colnames(ray_long)
#measurements are from 13:51
ray_long <- melt(ray_sub1, id.vars = c(1:14))
colnames(ray_long)
#select out specific measurements / change measurement names and map to template
ray_long_sub <- subset(ray_long, ray_long$measurement %in% ontology$measurement[ontology$dataset == "ray"])
#get rid of NAs
ray_clean <- ray_long_sub[!(is.na(ray_long_sub$value)),]
#next change names to match template
for(i in 1:length(ray_clean$SPEC_ID)){
ray_clean$variable[i] <- ontology$ontologyTerm[ontology$measurement == ray_clean$measurement[i]]
}
unique(ray_clean$variable)
ray <- read.csv("https://de.cyverse.org/dl/d/16030E74-A54F-44B2-AA03-76B1A49FCA49/1.FuTRESEquidDbase_6_24_2019.csv", stringsAsFactors = FALSE) #how to point to latest data version?
boneAbbr <- read.csv("https://de.cyverse.org/dl/d/C82D7659-5503-455B-8F7F-883DC3F1BAE0/BoneAbbr.csv", stringsAsFactors = FALSE)
locality <- read.csv("https://de.cyverse.org/dl/d/736F420E-6474-45F0-82EE-6A43D1703DE2/2.LOCAL_6_24_2019FuTRESPROTECTED.csv", stringsAsFactors = FALSE)
locality.1 <- locality[,c(1:3,5)]
#get rid of protected sites
ray_safe <- subset(ray, subset = ray$PROTECTED...P != "P")
for(i in 1:length(ray_safe$SPEC_ID)){
if(isTRUE(ray_safe$LOCALITY != "NA")){
ray_safe$verbatimLocality[i] <- locality.1$LOCALITYName[locality.1$LOCALITY.No == ray_safe$LOCALITY[i] & locality.1$COUNTRY.No == ray_safe$COUNTRY[i]]
ray_safe$country[i] <- locality.1$COUNTRYName[locality.1$LOCALITY.No == ray_safe$LOCALITY[i] & locality.1$COUNTRY.No == ray_safe$COUNTRY[i]]
}
else{
next()
}
}
#cut ray's data to just limb and dental measurements for now from "focused traits"
#https://docs.google.com/spreadsheets/d/1rU15rBo-JpopEqpxBXLWSqaecBXwtYpxBLjRImcCvDQ/edit#gid=0
Rpattern <-  "pre?molar|metacarpal|metatarsal|1st phalanx III" #? allows it to be premolar or molar (note: need all three letters: p r e)
Rx <- grep(Rpattern, boneAbbr$Bone, value = TRUE)
boneAbbr_sub <- boneAbbr[boneAbbr$Bone %in% Rx,]
ray_sub1 <- ray_safe[ray_safe$BONE %in% boneAbbr_sub$Abbreviation,]
ray_sub2 <- subset(ray_safe, subset = c(ray_safe$BONE == "tibia" |
ray_safe$BONE == "humerus" |
ray_safe$BONE == "femur" |
ray_safe$BONE == "radius"))
ray_sub <- rbind(ray_sub1, ray_sub2)
#create species name
ray_sub$binomial <- paste(ray_sub$GENUS, ray_sub$SPECIES, sep = " ")
ray_sub$SPEC_ID <- gsub("^\\s+|\\s+$", "", ray_sub$SPEC_ID)
colnames(ray_sub)
#reorder columns
ray_sub1 <- ray_sub[,c(1:12,53,13:51)]
#measurements are from 13:51
ray_long <- melt(ray_sub1, id.vars = c(1:13))
#select out specific measurements / change measurement names and map to template
ray_clean$measurement <- paste(ray_clean$BONE, ray_clean$variable, sep = " ")
ray_long_sub <- subset(ray_long, ray_long$measurement %in% ontology$measurement[ontology$dataset == "ray"])
#get rid of NAs
ray_clean <- ray_long_sub[!(is.na(ray_long_sub$value)),]
#next change names to match template
for(i in 1:length(ray_clean$SPEC_ID)){
ray_clean$variable[i] <- ontology$ontologyTerm[ontology$measurement == ray_clean$measurement[i]]
}
View(ray_clean)
View(ray_long_sub)
#select out specific measurements / change measurement names and map to template
ray_long$measurement <- paste(ray_long$BONE, ray_long$variable, sep = " ")
View(ray_long)
ray_long_sub <- subset(ray_long, ray_long$measurement %in% ontology$measurement[ontology$dataset == "ray"])
View(ray_long_sub)
#get rid of NAs
ray_clean <- ray_long_sub[!(is.na(ray_long_sub$value)),]
#next change names to match template
for(i in 1:length(ray_clean$SPEC_ID)){
ray_clean$variable[i] <- ontology$ontologyTerm[ontology$measurement == ray_clean$measurement[i]]
}
View(ray_clean)
#next change names to match template
for(i in 1:length(ray_clean$SPEC_ID)){
ray_clean$x[i] <- ontology$ontologyTerm[ontology$measurement == ray_clean$measurement[i]]
}
ray_long_sub <- subset(ray_long, ray_long$measurement %in% ontology$measurement[ontology$dataset == "ray"])
#get rid of NAs
ray_clean <- ray_long_sub[!(is.na(ray_long_sub$value)),]
#next change names to match template
for(i in 1:length(ray_clean$SPEC_ID)){
ray_clean$x[i] <- ontology$ontologyTerm[ontology$measurement == ray_clean$measurement[i]]
}
ray_clean$variable <- ray_clean$x
View(ray_clean)
colnames(ray_clean)[1] %in% template$columnName
for(i in 1:length(ray_clean)){
if(isTRUE(colnames(ray_clean)[i] %in% template$columnName)){
colnames(ray_clean.1)[i] <- template$templateTerm[template$columnName == colnames(ray_clean.1)[i]]
}
else{
ray_clean <- ray_clean[,-i]
}
}
x <- ray_clean[,-2]
x
colnames(ray_clean)
colnames(x)
for(i in 1:length(ray_clean)){
if(isTRUE(colnames(ray_clean)[i] %in% template$columnName)){
colnames(ray_clean.1)[i] <- template$templateTerm[template$columnName == colnames(ray_clean.1)[i]]
}
else{
next()
}
}
template$templateTerm[template$columnName == colnames(ray_clean.1)[1]]
colnames(ray_clean.1)[1]
for(i in 1:2){
if(isTRUE(colnames(ray_clean)[i] %in% template$columnName)){
colnames(ray_clean.1)[i] <- template$templateTerm[template$columnName == colnames(ray_clean.1)[i]]
}
else{
next()
}
}
colnames(ray_clean.1)[2]
colnames(ray_clean)[1] %in% template$columnName
colnames(ray_clean)[2] %in% template$columnName
colnames(ray_clean)[1]
template$templateTerm[template$columnName == colnames(ray_clean.1)[1]]
template$columnName == colnames(ray_clean.1)[1]
colnames(ray_clean.1)[1] == template$columnNam
colnames(ray_clean.1)[1] == template$columnName
template$templateTerm[template$columnName == colnames(ray_clean.1)[1]]
template$templateTerm[colnames(ray_clean.1)[1] == template$columnName]
cols <- colnames(ray_clean)
cols
cols[1]
template$templateTerm[template$columnName == cols[1]]
for(i in 1:length(cols)){
if(isTRUE(colnames(ray_clean)[i] %in% template$columnName)){
colnames(ray_clean.1)[i] <- template$templateTerm[template$columnName == cols[i]]
}
else{
next()
}
}
for(i in 1:length(cols)){
if(isTRUE(colnames(ray_clean)[i] %in% template$columnName[template$columnName == "ray"])){
colnames(ray_clean.1)[i] <- template$templateTerm[template$columnName == cols[i] & template$dataset == "ray"]
}
else{
next()
}
}
cols <- colnames(ray_clean)
for(i in 1:length(cols)){
if(isTRUE(colnames(ray_clean)[i] %in% template$columnName[template$columnName == "ray"])){
colnames(ray_clean)[i] <- template$templateTerm[template$columnName == cols[i] & template$dataset == "ray"]
}
else{
next()
}
}
colnames(ray_clean)
template$templateTerm[template$columnName == cols[1] & template$dataset == "ray"]
colnames(ray_clean)[1] <- "materialSampleID"
colnames(ray_clean)
colnames(ray_clean)[1] %in% template$columnName[template$columnName == "ray"]
if(isTRUE(colnames(ray_clean)[i] %in% template$columnName[template$dataset == "ray"])){
colnames(ray_clean)[i] <- template$templateTerm[template$columnName == cols[i] & template$dataset == "ray"]
}
cols <- colnames(ray_clean)
for(i in 1:length(cols)){
if(isTRUE(colnames(ray_clean)[i] %in% template$columnName[template$dataset == "ray"])){
colnames(ray_clean)[i] <- template$templateTerm[template$columnName == cols[i] & template$dataset == "ray"]
}
else{
next()
}
}
#get rid of NAs
ray_clean <- ray_long_sub[!(is.na(ray_long_sub$value)),]
#next change names to match template
for(i in 1:length(ray_clean$SPEC_ID)){
ray_clean$x[i] <- ontology$ontologyTerm[ontology$measurement == ray_clean$measurement[i]]
}
ray_clean$variable <- ray_clean$x
cols <- colnames(ray_clean)
for(i in 1:length(cols)){
if(isTRUE(colnames(ray_clean)[i] %in% template$columnName[template$dataset == "ray"])){
colnames(ray_clean)[i] <- template$templateTerm[template$columnName == cols[i] & template$dataset == "ray"]
}
else{
next()
}
}
colnames(ray_clean)
ray_clean <- ray_long_sub[!(is.na(ray_long_sub$value)),]
#next change names to match template
for(i in 1:length(ray_clean$SPEC_ID)){
ray_clean$x[i] <- ontology$ontologyTerm[ontology$measurement == ray_clean$measurement[i]]
}
ray_clean$variable <- ray_clean$x
cols <- colnames(ray_clean)
for(i in 1:length(cols)){
if(isTRUE(colnames(ray_clean)[i] %in% template$columnName[template$dataset == "ray"])){
colnames(ray_clean)[i] <- template$templateTerm[template$columnName == cols[i] & template$dataset == "ray"]
}
else{
ray_clean <- ray_clean[,-i]
}
}
#add missing columns
ray_clean$individualID <- ray_clean$materialSampleID
ray_clean$measurementUnit <- rep("mm", length(ray_clean$SPEC_ID))
#get rid of NAs
ray_clean <- ray_long_sub[!(is.na(ray_long_sub$value)),]
#next change names to match template
for(i in 1:length(ray_clean$SPEC_ID)){
ray_clean$x[i] <- ontology$ontologyTerm[ontology$measurement == ray_clean$measurement[i]]
}
ray_clean$variable <- ray_clean$x
cols <- colnames(ray_clean)
for(i in 1:length(cols)){
if(isTRUE(colnames(ray_clean)[i] %in% template$columnName[template$dataset == "ray"])){
colnames(ray_clean)[i] <- template$templateTerm[template$columnName == cols[i] & template$dataset == "ray"]
}
else{
next()
}
}
#add missing columns
ray_clean$individualID <- ray_clean$materialSampleID
ray_clean$measurementUnit <- rep("mm", length(ray_clean$SPEC_ID))
cols <- colnames(ray_clean)
for(i in 1:length(cols)){
if(isTRUE(colnames(ray_clean)[i] %in% template$columnName[template$dataset == "ray"])){
colnames(ray_clean)[i] <- template$templateTerm[template$columnName == cols[i] & template$dataset == "ray"]
}
else{
next()
}
}
colnames(ray_clean)
#add missing columns
ray_clean$individualID <- ray_clean$materialSampleID
ray_clean$measurementUnit <- rep("mm", length(ray_clean[1]))
ray_clean <- ray_long_sub[!(is.na(ray_long_sub$value)),]
#next change names to match template
for(i in 1:length(ray_clean$SPEC_ID)){
ray_clean$x[i] <- ontology$ontologyTerm[ontology$measurement == ray_clean$measurement[i]]
}
ray_clean$variable <- ray_clean$x
cols <- colnames(ray_clean)
x <- c()
for(i in 1:length(cols)){
if(isTRUE(colnames(ray_clean)[i] %in% template$columnName[template$dataset == "ray"])){
colnames(ray_clean)[i] <- template$templateTerm[template$columnName == cols[i] & template$dataset == "ray"]
}
else{
x[i] <- colnames(ray_clean)[i]
}
}
#add missing columns
ray_clean$individualID <- ray_clean$materialSampleID
ray_clean$measurementUnit <- rep("mm", length(ray_clean[1]))
x
x <- !is.na(x)
x
ray_clean <- ray_long_sub[!(is.na(ray_long_sub$value)),]
#next change names to match template
for(i in 1:length(ray_clean$SPEC_ID)){
ray_clean$x[i] <- ontology$ontologyTerm[ontology$measurement == ray_clean$measurement[i]]
}
ray_clean$variable <- ray_clean$x
cols <- colnames(ray_clean)
x <- c()
for(i in 1:length(cols)){
if(isTRUE(colnames(ray_clean)[i] %in% template$columnName[template$dataset == "ray"])){
colnames(ray_clean)[i] <- template$templateTerm[template$columnName == cols[i] & template$dataset == "ray"]
}
else{
x[i] <- colnames(ray_clean)[i]
}
}
z <- x[!is.na(x)]
z
colnames(ray_clean)
## Ray's Data
ray <- read.csv("https://de.cyverse.org/dl/d/16030E74-A54F-44B2-AA03-76B1A49FCA49/1.FuTRESEquidDbase_6_24_2019.csv", stringsAsFactors = FALSE) #how to point to latest data version?
boneAbbr <- read.csv("https://de.cyverse.org/dl/d/C82D7659-5503-455B-8F7F-883DC3F1BAE0/BoneAbbr.csv", stringsAsFactors = FALSE)
locality <- read.csv("https://de.cyverse.org/dl/d/736F420E-6474-45F0-82EE-6A43D1703DE2/2.LOCAL_6_24_2019FuTRESPROTECTED.csv", stringsAsFactors = FALSE)
locality.1 <- locality[,c(1:3,5)]
#get rid of protected sites
ray_safe <- subset(ray, subset = ray$PROTECTED...P != "P")
for(i in 1:length(ray_safe$SPEC_ID)){
if(isTRUE(ray_safe$LOCALITY != "NA")){
ray_safe$LOCALITYName[i] <- locality.1$LOCALITYName[locality.1$LOCALITY.No == ray_safe$LOCALITY[i] & locality.1$COUNTRY.No == ray_safe$COUNTRY[i]]
ray_safe$COUNTRYName[i] <- locality.1$COUNTRYName[locality.1$LOCALITY.No == ray_safe$LOCALITY[i] & locality.1$COUNTRY.No == ray_safe$COUNTRY[i]]
}
else{
next()
}
}
#cut ray's data to just limb and dental measurements for now from "focused traits"
#https://docs.google.com/spreadsheets/d/1rU15rBo-JpopEqpxBXLWSqaecBXwtYpxBLjRImcCvDQ/edit#gid=0
Rpattern <-  "pre?molar|metacarpal|metatarsal|1st phalanx III" #? allows it to be premolar or molar (note: need all three letters: p r e)
Rx <- grep(Rpattern, boneAbbr$Bone, value = TRUE)
boneAbbr_sub <- boneAbbr[boneAbbr$Bone %in% Rx,]
ray_sub1 <- ray_safe[ray_safe$BONE %in% boneAbbr_sub$Abbreviation,]
ray_sub2 <- subset(ray_safe, subset = c(ray_safe$BONE == "tibia" |
ray_safe$BONE == "humerus" |
ray_safe$BONE == "femur" |
ray_safe$BONE == "radius"))
ray_sub <- rbind(ray_sub1, ray_sub2)
#create species name
ray_sub$binomial <- paste(ray_sub$GENUS, ray_sub$SPECIES, sep = " ")
ray_sub$SPEC_ID <- gsub("^\\s+|\\s+$", "", ray_sub$SPEC_ID)
colnames(ray_sub)
colnames(ray_safe)
for(i in 1:length(ray_safe$SPEC_ID)){
if(isTRUE(ray_safe$LOCALITY != "NA")){
ray_safe$LOCALITYName[i] <- locality.1$LOCALITYName[locality.1$LOCALITY.No == ray_safe$LOCALITY[i] & locality.1$COUNTRY.No == ray_safe$COUNTRY[i]]
ray_safe$COUNTRYName[i] <- locality.1$COUNTRYName[locality.1$LOCALITY.No == ray_safe$LOCALITY[i] & locality.1$COUNTRY.No == ray_safe$COUNTRY[i]]
}
else{
next()
}
}
colnames(ray_safe)
install.packages("reticulate")
library(reticulate)
use_python("/Library/Frameworks/Python.framework/Versions/2.7/bin/python")
#"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7"
py_available(TRUE)
#"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7"
py_available(TRUE)
install.packages("reticulate")
library(reticulate)
use_python("/Library/Frameworks/Python.framework/Versions/2.7/bin/python")
#"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7"
py_available(TRUE)
py_install("pandas")
install.packages("reticulate")
library(reticulate)
use_python("/Library/Frameworks/Python.framework/Versions/2.7/bin/python")
#"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7"
py_available(TRUE)
py_install("pandas")
#"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7"
use_virtualenv("r-reticulate")
py_available(TRUE)
py_install("pandas")
